# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #


ctrl + alt + cmd - 0x29 : skhd-preset search-and-execute-command
ctrl + alt + cmd + shift - m : yabai-preset deminimize-last
ctrl + alt + cmd - m : yabai -m window --minimize
ctrl + alt + cmd - return : yabai-preset smart-toggle-fullscreen

ctrl + alt + cmd + shift - return : yabai-preset unstacked-swap-largest

ctrl + alt + cmd - v : btt-preset trigger-named-trigger "Edit Selection in Vim"
ctrl + alt + cmd - t : btt-preset trigger-named-trigger "Chrome: Open New Tab (with selection is One Line)"

ctrl + alt + cmd - 0x21 : yabai-preset focus-space prev # Open square bracket [
ctrl + alt + cmd - 0x1E : yabai-preset focus-space next # Clsoe square bracket ]

ctrl + alt + cmd - h : yabai -m window --focus west || yabai-preset focus-window west
ctrl + alt + cmd - j : yabai -m window --focus south || yabai-preset focus-window south
ctrl + alt + cmd - k : yabai -m window --focus north || yabai-preset focus-window north
ctrl + alt + cmd - l : yabai -m window --focus east || yabai-preset focus-window east

ctrl + alt + cmd + shift - h : yabai -m window --swap west || skhd -k "ctrl + alt + cmd - left"
ctrl + alt + cmd + shift - j : yabai -m window --swap south || skhd -k "ctrl + alt + cmd - down"
ctrl + alt + cmd + shift - k : yabai -m window --swap north || skhd -k "ctrl + alt + cmd - up"
ctrl + alt + cmd + shift - l : yabai -m window --swap east || skhd -k "ctrl + alt + cmd - right"

ctrl + alt + cmd - 0x1B : yabai -m window --resize bottom_right:-100:0 # minus
# ctrl + alt + cmd + shift - 0x1B : yabai -m window --resize bottom_right:0:-100 # minus
ctrl + alt + cmd - 0x18 : yabai -m window --resize bottom_right:100:0 # equals
# ctrl + alt + cmd + shift - 0x18 : yabai -m window --resize bottom_right:0:100 # equals

ctrl + alt + cmd - 1 : display-message "Focus 1"; yabai-harpoon focus 1
ctrl + alt + cmd - 2 : display-message "Focus 2"; yabai-harpoon focus 2
ctrl + alt + cmd - 3 : display-message "Focus 3"; yabai-harpoon focus 3
ctrl + alt + cmd - 4 : display-message "Focus 4"; yabai-harpoon focus 4
ctrl + alt + cmd - 5 : display-message "Focus 5"; yabai-harpoon focus 5
ctrl + alt + cmd - 6 : display-message "Focus 6"; yabai-harpoon focus 6
ctrl + alt + cmd - 7 : display-message "Focus 7"; yabai-harpoon focus 7
ctrl + alt + cmd - 8 : display-message "Focus 8"; yabai-harpoon focus 8
ctrl + alt + cmd - 9 : display-message "Focus 9"; yabai-harpoon focus 9


ctrl + alt + cmd + shift - 0x18 : skhd -k "escape"; yabai-harpoon add # equals
service < a : skhd -k "escape"; yabai-harpoon add
service < backspace : skhd -k "escape"; yabai-harpoon delete
service < e : skhd -k "escape"; yabai-harpoon edit

ctrl + alt + cmd - n :   yabai-preset focus-window-in-stack next || yabai-preset focus-window-in-space next
ctrl + alt + cmd - p :   yabai-preset focus-window-in-stack prev || yabai-preset focus-window-in-space prev
ctrl + alt + cmd + shift - n : yabai-preset move-window-in-stack next
ctrl + alt + cmd + shift - p : yabai-preset move-window-in-stack prev

stack < j : skhd -k "escape"; yabai -m window --stack south
stack < k : skhd -k "escape"; yabai -m window --stack north
stack < h : skhd -k "escape"; yabai -m window --stack west
stack < l : skhd -k "escape"; yabai -m window --stack east

resize < return ; default
resize < j : yabai -m window --resize bottom_right:0:100
resize < k : yabai -m window --resize bottom_right:0:-100
resize < h : yabai -m window --resize bottom_right:-100:0
resize < l : yabai -m window --resize bottom_right:100:0
resize < shift - j : yabai -m window --resize top_left:0:100
resize < shift - k : yabai -m window --resize top_left:0:-100
resize < shift - h : yabai -m window --resize top_left:-100:0
resize < shift - l : yabai -m window --resize top_left:100:0
resize < shift - 0x2B : yabai -m space --rotate 90 # comma
resize < shift - 0x2F : yabai -m space --rotate 270 # period



ctrl + alt + cmd - space ; service

# If PID file exists and has a running process, focus window instead of creating a new one
service < ctrl + alt + cmd - e : skhd -k "escape"; if pgrep -q -F "$TMPDIR/nvim_skhd.pid"; \
        display-message "Focus SKHD"; \
        yabai-preset focus-pid "$(cat "$TMPDIR/nvim_skhd.pid")" ; \
    else; \
        display-message "Edit SKHD"; \
        neovide --frame buttonless --title-hidden "$HOME/.skhdrc_main" &; \
        echo "$last_pid" > "$TMPDIR/nvim_skhd.pid"; \
        wait; \
        rm "$TMPDIR/nvim_skhd.pid"; \
    end;

service < ctrl + alt + cmd - v : skhd -k "escape"; if pgrep -q -F "$TMPDIR/nvim_ghost.pid"; \
        display-message "Focus GHOST"; \
        yabai-preset focus-pid "$(cat "$TMPDIR/nvim_ghost.pid")" ; \
    else; \
        display-message "Start GHOST"; \
        env NVIM_GHOST_ENABLE=1 neovide --frame buttonless --title-hidden &; \
        echo "$last_pid" > "$TMPDIR/nvim_ghost.pid"; \
        wait; \
        rm "$TMPDIR/nvim_ghost.pid"; \
    end;

# Service mode bindings
service < ctrl + alt + cmd - space : skhd -k "escape"; yabai-preset focus-space recent
# service < space : skhd -k "escape"; if test "$_YABAI_MRU" = chrome_tab; skhd -k "alt - q"; else; yabai -m window --focus recent || yabai-preset focus-space recent; end
service < space : skhd -k "escape"; yabai -m window --focus recent || yabai-preset focus-space recent
service < shift - space : skhd -k "escape"; yabai-preset move-window-to-space recent
service < r ; resize
service < shift - r : skhd -k "escape"; yabai --stop-service && yabai --start-service && display-message "Yabai Restarted" || begin; yabai --start-service && display-message "Yabai Started"; end
service < shift - y : skhd -k "escape"; yabai-preset toggle-yabai
service < v : skhd -k "escape"; yabai -m window --insert east
service < shift - 0x27 : skhd -k "escape"; yabai -m window --insert south # double quotes
# Temporaily disable window restore to debug later
# service < t : skhd -k "escape"; yabai -m window --toggle float; yabai-preset is-window-floating && yabai-preset restore-window-position
service < t : skhd -k "escape"; yabai -m window --toggle float; yabai-preset is-window-floating && yabai -m window --grid "8:8:1:1:6:6"

service < z :  skhd -k "escape"; yabai -m window --insert stack # comma
service < s ; stack
service < shift - s : skhd -k "escape"; yabai-preset stack-windows-in-space
service < m : skhd -k "escape"; yabai-preset toggle-monocle-mode
service < shift - m : skhd -k "escape"; yabai-preset deminimize-all
service < 0x2B : skhd -k "escape"; yabai -m space --layout stack; display-message "Laybout stack" # Comma
service < shift - 0x2B : skhd -k "escape"; yabai -m space --layout bsp; yabai-preset stack-windows-in-space;# Comma
service < 0x2F : skhd -k "escape"; yabai -m space --layout bsp; yabai-preset minimize-after-nth-window 3 # Period
service < shift - 0x2F : skhd -k "escape"; yabai -m space --layout bsp; display-message "Laybout bsp"
service < 0 : skhd -k "escape"; yabai -m space --layout float; display-message "Laybout float"
# Temporaily disable window restore to debug later
#; yabai -m query --windows --space | jq -r ".[] | .id" | while read --line winid; yabai-preset restore-window-position "$winid"; end

service < shift - 0x2A : skhd -k "escape"; yabai -m space --mirror y-axis # Pipe |
service < 0x1B : skhd -k "escape"; yabai -m space --mirror x-axis # minus
service < shift - 5 : skhd -k "escape"; yabai -m space --mirror x-axis --mirror y-axis # percent
service < shift - 0x2B : skhd -k "escape"; yabai -m space --rotate 90 # Comma
service < shift - 0x2F : skhd -k "escape"; yabai -m space --rotate 270 # Period
service < y : skhd -k "escape"; yabai -m window --toggle split
service < 0x18 : skhd -k "escape"; yabai -m space --balance # equals
# move window to space with number
service < 1 : skhd -k "escape"; yabai-preset focus-space 1
service < 2 : skhd -k "escape"; yabai-preset focus-space 2
service < 3 : skhd -k "escape"; yabai-preset focus-space 3
service < 4 : skhd -k "escape"; yabai-preset focus-space 4
service < 5 : skhd -k "escape"; yabai-preset focus-space 5
service < 6 : skhd -k "escape"; yabai-preset focus-space 6
service < 7 : skhd -k "escape"; yabai-preset focus-space 7
service < 8 : skhd -k "escape"; yabai-preset focus-space 8
service < 9 : skhd -k "escape"; yabai-preset focus-space 9
service < shift - 1 : skhd -k "escape"; yabai-preset move-window-to-space 1
service < shift - 2 : skhd -k "escape"; yabai-preset move-window-to-space 2
service < shift - 3 : skhd -k "escape"; yabai-preset move-window-to-space 3
service < shift - 4 : skhd -k "escape"; yabai-preset move-window-to-space 4
service < shift - 5 : skhd -k "escape"; yabai-preset move-window-to-space 5
service < shift - 6 : skhd -k "escape"; yabai-preset move-window-to-space 6
service < shift - 7 : skhd -k "escape"; yabai-preset move-window-to-space 7
service < shift - 8 : skhd -k "escape"; yabai-preset move-window-to-space 8
service < shift - 9 : skhd -k "escape"; yabai-preset move-window-to-space 9
service < ctrl + alt + cmd - h : skhd -k "escape"; yabai -m window --warp west || yabai-preset unstack-window west
service < ctrl + alt + cmd - j : skhd -k "escape"; yabai -m window --warp south || yabai-preset unstack-window south
service < ctrl + alt + cmd - k : skhd -k "escape"; yabai -m window --warp north || yabai-preset unstack-window north
service < ctrl + alt + cmd - l : skhd -k "escape"; yabai -m window --warp east || yabai-preset unstack-window east
service < h : skhd -k "escape"; yabai-preset focus-display-with-fallback west
service < j : skhd -k "escape"; yabai-preset focus-display-with-fallback south
service < k : skhd -k "escape"; yabai-preset focus-display-with-fallback north
service < l : skhd -k "escape"; yabai-preset focus-display-with-fallback east
service < tab : skhd -k "escape"; yabai-preset move-window-to-display-with-fallback
service < shift - 0x2C : skhd -k "escape"; btt-preset trigger-menu-bar 'Help' # slash / question mark
service < ctrl + alt + cmd - 0x2C : skhd -k "escape"; skhd-preset search-and-display-mapping # slash / question mark

service < ctrl + alt + cmd - v : skhd -k "escape"; btt-preset trigger-menu-bar 'Window;Full Screen Tile; Left of Screen'
service < ctrl + alt + cmd - return : skhd -k "escape" ; btt-preset send-keys ctrl cmd f



# Below is a list of keybinidng that would be equivalent to "Invoke" move on Aerospace
# But currently there's no support for presetting windows in a specific space without disabling SIP
# I'm keeping this commented in case it's useful in the future
# Invoke mode bindings
ctrl + alt + cmd - i ; invoke
invoke < 1 : skhd -k "escape"; yabai-preset arrange-spaces \
    -w "1:.*Thales \\(Work\\).*" \
    -a "2:iTerm2" \
    -a "3:.*VS Code.*" \
    -a "4:Workchat" \
    -a "5:Obsidian"
invoke < p : skhd -k "escape"; yabai-preset arrange-spaces \
    -w "7:.*Thales \\(Personal\\).*"
invoke < b : skhd -k "escape"; osascript -e 'tell application "Alfred" to search "btt "'
invoke < t : skhd -k "escape"; osascript -e 'tell application "Alfred" to search "top "'
invoke < y : skhd -k "escape"; open 'raycast://extensions/tonka3000/youtube/search-videos?arguments=%7B%22query%22%3A%22%22%7D'
invoke < return : skhd -k "escape"; iterm-preset new-window


service < c ; chrome
ctrl + alt + cmd + shift - c ; chrome
ctrl + alt + cmd - 0x27 ; chrome # single quote
chrome < ctrl + alt + cmd - 0x27 ; goto # single quote
chrome < 0x27 ; goto # single quote
chrome < backspace : skhd -k "escape"; chrome-preset close-tabs-with-url '^.*\.zoom\.us/j/.*$'
chrome < 1 : skhd -k "escape"; chrome-preset focus-pinned-tab 1
chrome < 2 : skhd -k "escape"; chrome-preset focus-pinned-tab 2
chrome < 3 : skhd -k "escape"; chrome-preset focus-pinned-tab 3
chrome < 4 : skhd -k "escape"; chrome-preset focus-pinned-tab 4
chrome < 5 : skhd -k "escape"; chrome-preset focus-pinned-tab 5
chrome < 6 : skhd -k "escape"; chrome-preset focus-pinned-tab 6
chrome < 7 : skhd -k "escape"; chrome-preset focus-pinned-tab 7
chrome < 8 : skhd -k "escape"; chrome-preset focus-pinned-tab 8
chrome < 9 : skhd -k "escape"; chrome-preset focus-pinned-tab 9
chrome < shift - 1 : skhd -k "escape"; chrome-preset pin-tab 1
chrome < shift - 2 : skhd -k "escape"; chrome-preset pin-tab 2
chrome < shift - 3 : skhd -k "escape"; chrome-preset pin-tab 3
chrome < shift - 4 : skhd -k "escape"; chrome-preset pin-tab 4
chrome < shift - 5 : skhd -k "escape"; chrome-preset pin-tab 5
chrome < shift - 6 : skhd -k "escape"; chrome-preset pin-tab 6
chrome < shift - 7 : skhd -k "escape"; chrome-preset pin-tab 7
chrome < shift - 8 : skhd -k "escape"; chrome-preset pin-tab 8
chrome < shift - 9 : skhd -k "escape"; chrome-preset pin-tab 9

service < shift - c ; goto
ctrl + alt + cmd + shift - 0x27 ; goto # single quote

#chrome_start
chrome < y : skhd -k "escape"; chrome-preset focus-or-open-url --profile="Default" youtube.com
chrome < g : skhd -k "escape"; chrome-preset focus-or-open-url --profile="Default" gmail.com
#chrome_end

# Cmd to sync Chrome and goto links
# :/^#chrome_start/+1,/^#chrome_end/yank a | /^#goto_start/+1,/^#goto_end/delete | /^#goto_start/put a | '[,']s/chrome/goto/ | '[,']s/focus-or-open-url/open-url/e

#goto_start
goto < y : skhd -k "escape"; chrome-preset open-url --profile="Default" youtube.com
goto < g : skhd -k "escape"; chrome-preset open-url --profile="Default" gmail.com
#goto_end

# App Shortcuts
ctrl + alt + cmd - b : btt-preset show-or-hide-app --only-show "/Applications/BetterTouchTool.app"
ctrl + alt + cmd - c : btt-preset show-or-hide-app --only-show "/Applications/Cursor.app"

ctrl + alt + cmd - x : btt-preset show-or-hide-app --only-show "/Applications/iTerm.app"
ctrl + alt + cmd - q : chrome-preset focus-or-open-url "gemini.google.com" --label "Gemini"
ctrl + alt + cmd - w : btt-preset show-or-hide-app --only-show "/Applications/WhatsApp.app"
ctrl + alt + cmd - z : btt-preset show-or-hide-app --only-show "/Applications/Obsidian.app"
ctrl + alt + cmd - s : btt-preset show-or-hide-app --only-show "/Applications/Spotify.app"
ctrl + alt + cmd - e : btt-preset show-or-hide-app --only-show "/Applications/Google Chrome.app"
ctrl + alt + cmd - r : btt-preset show-or-hide-app --only-show "/Applications/Google Chrome.app"
ctrl + alt + cmd - a : btt-preset show-or-hide-app --only-show "/Applications/Timery.app"
ctrl + alt + cmd + shift - a : btt-preset show-or-hide-app --only-show "~/Applications/Chrome Apps.localized/Pomofocus.app"
ctrl + alt + cmd + shift - z : btt-preset show-or-hide-app --only-show "~/Applications/Chrome Apps.localized/Google Keep.app"
ctrl + alt + cmd + shift - w : if pgrep "zoom.us" >/dev/null; \
        btt-preset show-or-hide-app --only-show "/Applications/zoom.us.app"; \
    else; \
        chrome-preset focus-or-open-url meet.google.com --label "Google Meet"; \
    end;
ctrl + alt + cmd + shift - s : if pgrep "zoom.us" >/dev/null; \
        btt-preset show-or-hide-app --only-show "/Applications/zoom.us.app"; \
        sleep 0.5; \
        btt-preset send-keys cmd shift a; \
    else; \
        chrome-preset focus-or-open-url meet.google.com --label "Google Meet"; \
        sleep 0.5; \
        btt-preset send-keys cmd d; \
    end;
ctrl + alt + cmd + shift - f : btt-preset show-or-hide-app --only-show "/Applications/WhatsApp.app"
ctrl + alt + cmd + shift - g : btt-preset show-or-hide-app --only-show "/System/Applications/Messages.app"
ctrl + alt + cmd + shift - q : btt-preset show-or-hide-app --only-show "/System/Applications/Utilities/Activity Monitor.app"

ctrl + alt + cmd - y : chrome-preset focus-or-open-url calendar.google.com --label "Calendar"

ctrl + alt + cmd - u : workflow-preset perform-default-ui
ctrl + alt + cmd + shift - o : btt-preset send-keys ctrl shift space

ctrl + alt + cmd + shift - v : if pgrep "kindaVim" >/dev/null; \
        display-message "Exit kindaVim"; \
        killall "kindaVim"; \
    else; \
        display-message "Enter kindaVim"; \
        open -a "kindaVim"; \
    end;
