{
;; ----------------------------------
;; This is my goku file for karabiner.
;; I started with this template: https://gist.github.com/nikolai-cc/02f6b070972840323ae355ef847e91a6
;; ~/Library/Logs/goku.log  -- I watch this to make sure that I'm not getting errors.

;; ----------------------------------
;; more info about goku: https://github.com/yqrashawn/GokuRakuJoudo
;; more info about karabiner: https://karabiner-elements.pqrs.org/docs
;; ----------------------------------
;; article karabiner god mode by nikita: https://medium.com/@nikitavoloboev/karabiner-god-mode-7407a5ddc8f6
;; examples: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/examples.org#profiles-wip
;; tutorial: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/tutorial.md#basic8
;; another article: https://kau.sh/blog/hacking-your-keyboard/
;; very well documented edn file by Kaushik Gopal: https://github.com/kaushikgopal/dotfiles/blob/master/.karabiner.edn
;; key names: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/src/karabiner_configurator/keys_info.clj
;; https://oliverfalvai.com/notes/posts/karabiner-setup/


:profiles {
    :Default {
        :default    true
        :sim        50      ;; if keydown event for two different keys are pressed within :sim ms, the keypresses are considered simultaneous
        :delay      500     ;; after :delay ms, the key press is considered to be delayed (TODO WHAT IS THIS??)
        :alone      150    ;; if keyup event comes within :alone ms from keydown, the key is not just pressed but held
        :held       250     ;; key is fired twice when :held ms is elapsed (otherwise seen as a hold command) (TODO WHAT IS THIS??)
    }
} ;; profiles

;; you can create templates for running shell commands. These follow clojure string template syntax.
:templates {
    :msg "/opt/homebrew/bin/fish -c 'display-message \"%s\"'"
    :skhd "/opt/homebrew/bin/fish -c 'skhd -k \"%s\"'"
    :open "open \"%s\""
    :open-app "open -a \"%s\""
    :btt-named "/opt/homebrew/bin/fish -c 'btt-preset trigger-named-trigger \"%s\"'"
    :fish "/opt/homebrew/bin/fish -c \"%s\""
    :delayed-set "sleep \"%s\"; karabiner_cli --set-variables '{%s: %s}'"
    ; :alfred "osascript -e 'tell application id \"com.runningwithcrayons.Alfred\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
}


:devices {
    ;; Lenovo THinkpad Trackpoint Keyboard
    :trackpoint_kb [{:vendor_id 6127 :product_id 24801}]
    :keystogo [{:vendor_id 5824 :product_id 10202}]
}

:applications {
    :vscode [
        "com.microsoft.VSCode"
        "com.facebook.fbvscode"
        "com.todesktop.230313mzl4w4u92" ; Cursor has a weird bundleid
    ]
    :chrome ["com.google.Chrome"]
}

:layers {}

:simlayers  {:space-mode { :key :spacebar }}
:simlayer-threshold 250

:tos {
    :end-hyper ["hyper-layer" 0]
}


;; ----------------------------------
;; Key mappings
;; ----------------------------------

;; This is where you define the modifications
:main [
    {
        :des "Mouseless: Right Shift + Space = Click"
        :rules [
            [:!Rleft_shift [["mouseless-mode" 1] [:noti :mouseless-hud "Mouseless Mode"]] nil {:afterup [["mouseless-mode" 0] [:noti :mouseless-hud]]}]
            [:!Rspacebar :button1]
            [:!ROspacebar :button2]
            [:!RCspacebar :button3]
            ; opens wheel scroll mode in mouseless
            [:!Sright_shift :!Sright_shift nil {:alone :f14}]
            :mouseless-mode
            [:h {:mkey {:x -1546}}]
            [:j {:mkey {:y 1546}}]
            [:l {:mkey {:x 1546}}]
            [:i {:mkey {:y -1546}}]
            [:k {:mkey {:y -1546}}]
            [:spacebar :button1]
            [:!Ospacebar :button2]
            [:!Cspacebar :button3]
        ]
    }

    {
        :des "Space FN"
        :rules [
            :space-mode
            [:left_shift :left_shift]
            [:right_shift :left_shift]
            [:##a :!Cleft_arrow]
            [:##0 :!Cleft_arrow]
            [:##4 :!Cright_arrow]
            [:e :!Cright_arrow]
            [:##e :!Oright_arrow]
            [:##r :!Cright_arrow]
            [:##b :!Oleft_arrow]
            [:##w :!Oright_arrow]
            [:##h :left_arrow]
            [:##j :down_arrow]
            [:##k :up_arrow]
            [:##l :right_arrow]
            [:##d :page_down]
            [:##u :page_up]
            [:##s :spacebar]
            [:caps_lock :!Odelete_or_backspace]
            [:g :!Cup_arrow]
            [:!Sg :!Cdown_arrow]
        ]
    }


    {
        :des "Workflow Enhancement Shortcuts"
        :rules [
            ; App specific shortcuts are applied first
            ; [:##left_option :##left_option [["option-pressed-once" 1] :chrome] {:alone [:!CSa {:key :vk_none :held_down_ms 100} :down_arrow {:key :vk_none :held_down_ms 100} :return_or_enter] :afterup ["option-pressed-once" 0]}]
            [:##left_option :##left_option [["option-pressed-once" 1] :chrome] {:alone [:fish "skhd -k 'cmd+shift-a'; sleep 0.05; skhd -k 'return'"] :afterup ["option-pressed-once" 0]}]
            [:##left_option :##left_option [["option-pressed-once" 1] :chrome] {:alone [{:key :left_control :held_down_ms 100} :!Ttab] :afterup ["option-pressed-once" 0]}]
            ; Navigate back on vscode
            [{:pkey :button4} :button4 :vscode {:alone :!Thyphen}]
            [:!E#R1 :!TOC1]
            [:!E#R2 :!TOC2]
            [:!E#R3 :!TOC3]
            [:!E#R4 :!TOC4]
            [:!E#R5 :!TOC5]
            [:!E#R6 :!TOC6]
            [:!E#R7 :!TOC7]
            [:!E#R8 :!TOC8]
            [:right_command :right_option nil {:alone [["hyper-layer" 1] [:noti :hyper-hud "Hyper-layer Active"]]}]
            ; Switch back to the last used app.  F18 is configured in BTT
            [:##left_shift :##left_shift ["shift-pressed-once" 1] {:alone :f18 :afterup ["shift-pressed-once" 0]}]
            [:##left_shift [["shift-pressed-once" 1] :##left_shift] nil {:delayed {:invoked ["shift-pressed-once" 0] :canceled ["shift-pressed-once" 0]}}]
            [{:pkey :button5} :button5 nil {:alone :f18}]
            [:##left_option :##left_option ["option-pressed-once" 1] {:alone :!Cgrave_accent_and_tilde :afterup ["option-pressed-once" 0]}]
            [:##left_option [["option-pressed-once" 1] :##left_option] nil {:delayed {:invoked ["option-pressed-once" 0] :canceled ["option-pressed-once" 0]}}]
            [:##left_control :##left_control ["control-pressed-once" 1] {:alone :!TOCslash :afterup ["control-pressed-once" 0]}]
            [:##left_control [["control-pressed-once" 1] :##left_control] nil {:delayed {:invoked ["control-pressed-once" 0] :canceled ["control-pressed-once" 0]}}]
            [:##left_command :##left_command ["command-pressed-once" 1] {:alone :!TOc :afterup ["command-pressed-once" 0]}]
            [:##left_command [["command-pressed-once" 1] :##left_command] nil {:delayed {:invoked ["command-pressed-once" 0] :canceled ["command-pressed-once" 0]}}]
            [:!Cq nil ["command-q-once" 1] {:alone :!Cq :afterup ["command-q-once" 0]}]
            [:!Cq [[:msg "Double press Cmd+Q to Quit"] ["command-q-once" 1]] nil {:delayed {:invoked ["command-q-once" 0] :canceled ["command-q-once" 0]}}]
            ; opens mouseless
            [:##right_shift :right_shift nil {:alone :f13 :params {:alone 150}}]
            ]
    }

    {
        :des "Hyperkey as Leader Key"
        :rules [
            :!hyper-layer
            ; Right control now triggers hyper mode, so the hold behavior is actually a little troublesome at times. Temporarily disabling it.
            ; [:caps_lock { :key :!CTleft_option :lazy true } nil { :alone { :key :escape :halt true } :delayed {:canceled {:key :vk_none, :halt true} :invoked {:key :vk_none, :halt true}} :afterup [["hyper-layer" 1] [:noti :hyper-hud "Hyper-layer Active"]] :params {:alone 500 :delay 2000 }}]
            [:!Scaps_lock {:key :!CSTleft_option :lazy true} nil {:alone :!Sescape} ]
            [:!Ccaps_lock :return_or_enter]
            [:!Tcaps_lock :!Tescape]
            [:##caps_lock { :key :!CTleft_option :lazy true } nil { :alone { :key :escape } :params {:alone 400}}]
            :hyper-layer
            ; [:!Scaps_lock [:!CSTleft_option ["hyper-layer" 0] [:noti :hyper-hud]] nil {:alone :escape}]
            [:#SRcaps_lock :!CTleft_option nil {:alone :escape :afterup [["hyper-layer" 0] [:noti :hyper-hud]]}]
            [:#SRa [:!CTOa ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRb [:!CTOb ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRc [:!CTOc ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRd [:!CTOd ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRe [:!CTOe ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRf [:!CTOf ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRg [:!CTOg ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRh [:!CTOh ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRi [:!CTOi ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRj [:!CTOj ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRk [:!CTOk ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRl [:!CTOl ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRm [:!CTOm ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRn [:!CTOn ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRo [:!CTOo ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRp [:!CTOp ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRq [:!CTOq ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRr [:!CTOr ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRs [:!CTOs ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRt [:!CTOt ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRu [:!CTOu ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRw [:!CTOw ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRv [:!CTOv ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRx [:!CTOx ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRy [:!CTOy ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRz [:!CTOz ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SR0 [:!CTO0 ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SR1 [:!CTO1 ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SR2 [:!CTO2 ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SR3 [:!CTO3 ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SR4 [:!CTO4 ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SR5 [:!CTO5 ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SR6 [:!CTO6 ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SR7 [:!CTO7 ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SR8 [:!CTO8 ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SR9 [:!CTO9 ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SR9 [:!CTO9 ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRhyphen [:!CTOhyphen ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRequal_sign [:!CTOequal_sign ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRopen_bracket [:!CTOopen_bracket ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRclose_bracket [:!CTOclose_bracket ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRbackslash [:!CTObackslash ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRcomma [:!CTOcomma ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRperiod [:!CTOperiod ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRslash [:!CTOslash ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRreturn_or_enter [:!CTOreturn_or_enter ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRquote [:!CTOquote ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRsemicolon [:!CTOsemicolon ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRgrave_accent_and_tilde [:!CTOgrave_accent_and_tilde ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRdelete_or_backspace [:!CTOdelete_or_backspace ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:spacebar [:!CTOspacebar ["hyper-layer" 0] [:noti :hyper-hud]]]
            [:#SRspacebar [:!CTOspacebar ["hyper-layer" 0] [:noti :hyper-hud]]]
        ]
    }

    {
        :des "(TrackPoint) Ignore long middle click"
        :rules [
            :trackpoint_kb
            [{:pkey :button3} :vk_none  nil {:alone :button3}]
            ; Testing whether the key above is enough for the rule
            ; [{:pkey :button3} :vk_none  nil {:alone {:pkey :button3 :halt true}}]
        ]
    }

    ; Fn key would only be supported via a pull request
    ; Check unkown events in event view
    ; Follow guide https://karabiner-elements.pqrs.org/docs/help/advanced-topics/unknown-events/
    ; {
    ;     :des "Bluetooth Keyboard FN -> Ctrl"
    ;     :rules [
    ;         :keystogo
    ;         [:!Fa :!Ta] ]
    ; }

    ; {
    ;     :des   "Press left_ctrl twice to enter clipboard history"
    ;     :rules [
    ;         [:left_control [:!TOc ["ctrl-pressed-once" 0]] ["ctrl-pressed-once" 1]]
    ;         [:##left_control [["ctrl-pressed-once" 1] :left_control] nil {:delayed {:invoked ["ctrl-pressed-once" 0] :canceled ["ctrl-pressed-once" 0]}}]
    ;     ]
    ; }

    ; Doesn't work very well and I don't use thig
    ; But the config might become useful someday
    ; I might attempt kanata that appears to support the mod tap behavior I'm after
    ; {
    ;     :des "Baserow Mod"
    ;     :rules [
    ;         [[:z :x :c :v] :!TOSleft_command]
    ;         ;; tripples
    ;         [[:x :c :v] :!OSleft_command]
    ;         [[:z :c :v] :!TSleft_command]
    ;         [[:z :x :v] :!TOleft_command]
    ;         [[:z :x :c] :!TOleft_shift]
    ;         ;; pairs
    ;         [[:z :x] :!Tleft_option]
    ;         [[:x :c] :!Oleft_shift]
    ;         [[:c :v] :!Sleft_command]
    ;         [[:z :c] :!Tleft_shift]
    ;         [[:z :v] :!Tleft_command]
    ;         [[:x :v] :!Oleft_command]
    ;         ;; singles
    ;         [:z nil nil { :held { :key :left_control :halt true } :alone { :key :z :halt true } :delayed {:canceled :z :invoked :vk_none} }]
    ;         [:x nil nil { :held { :key :left_option :halt true } :alone { :key :x :halt true } :delayed {:canceled :x :invoked :vk_none} }]
    ;         [:c nil nil { :held { :key :left_shift :halt true } :alone { :key :c :halt true } :delayed {:canceled :c :invoked :vk_none} }]
    ;         [:v nil nil { :held { :key :left_command :halt true } :alone { :key :v :halt true } :delayed {:canceled :v :invoked :vk_none} }]
    ;
    ;         ;; right side
    ;         [[:slash :period :comma :m] :!TOSleft_command]
    ;         ;; tripples
    ;         [[:period :comma :m] :!OSleft_command]
    ;         [[:slash :comma :m] :!TSleft_command]
    ;         [[:slash :period :m] :!TOleft_command]
    ;         [[:slash :period :comma] :!TOleft_shift]
    ;         ;; pairs
    ;         [[:slash :period] :!Tleft_option]
    ;         [[:period :comma] :!Oleft_shift]
    ;         [[:comma :m] :!Sleft_command]
    ;         [[:slash :comma] :!Tleft_shift]
    ;         [[:slash :m] :!Tleft_command]
    ;         [[:period :m] :!Oleft_command]
    ;         ;; singles
    ;         [:slash nil nil { :held { :key :left_control :halt true } :alone { :key :slash :halt true } :delayed {:canceled :slash :invoked :vk_none} }]
    ;         [:period nil nil { :held { :key :left_option :halt true } :alone { :key :period :halt true } :delayed {:canceled :period :invoked :vk_none} }]
    ;         [:comma nil nil { :held { :key :left_shift :halt true } :alone { :key :comma :halt true } :delayed {:canceled :comma :invoked :vk_none} }]
    ;         [:m nil nil { :held { :key :left_command :halt true } :alone { :key :m :halt true } :delayed {:canceled :m :invoked :vk_none} }]
    ;     ]
    ; }
]
}

;; PASTEBIN
;; "osascript -e 'tell app \"System Events\" to sleep'"



;; MODIFIERS
    ;; !  | means mandatory
    ;; #  | means optional
    ;; C  | left_command
    ;; T  | left_control
    ;; O  | left_option
    ;; S  | left_shift
    ;; F  | fn
    ;; Q  | right_command
    ;; W  | right_control
    ;; E  | right_option
    ;; R  | right_shift
    ;; P  | caps_lock
    ;; !! | mandatory command + control + optional + shift (hyper)
    ;; ## | optional any

;; FROM modifiers
    ;; to understand better how modifiers work in karabiner
    ;; karabiner definition of mandatory and optional
    ;; https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/from/modifiers/

    ;;    | no modifier
    ;;                  input key maps to output key exactly
    ;;                  adding any modifier will cancel the event

    ;; !  | mandatory
    ;;                  specified modifier is removed in output (to event)
    ;;                  specified modifiers must be present for event to occur
    ;;                  adding any other modifier will cancel the event

    ;; #  | optional (single)
    ;;                  specified modifier is kept in output (to event)
    ;;                  one (or none) of the specified modifiers must be present
    ;;                  adding any other modifier will cancel the event

    ;; ## | optional any
    ;;                  specified modifier is removed in output (to event)
    ;;                  specified modifiers *must* be present for event to occur
    ;;                  adding any other modifier will add to output event
    ;;                  (what you typically expect, additional modifiers tacked on)
    ;;
    ;; need to prefix C T O S F with ! or #

; (def keys-info
;   {:button1 {:button true}
;    :button2 {:button true}
;    :button3 {:button true}
;    :button4 {:button true}
;    :button5 {:button true}
;    :button6 {:button true}
;    :button7 {:button true}
;    :button8 {:button true}
;    :button9 {:button true}
;    :button10 {:button true}
;    :button11 {:button true}
;    :button12 {:button true}
;    :button13 {:button true}
;    :button14 {:button true}
;    :button15 {:button true}
;    :button16 {:button true}
;    :button17 {:button true}
;    :button18 {:button true}
;    :button19 {:button true}
;    :button21 {:button true}
;    :button22 {:button true}
;    :button23 {:button true}
;    :button24 {:button true}
;    :button25 {:button true}
;    :button26 {:button true}
;    :button27 {:button true}
;    :button28 {:button true}
;    :button29 {:button true}
;    :button30 {:button true}
;    :button31 {:button true}
;    :button32 {:button true}
;    ;; :x {:mouse_key true}
;    ;; :y {:mouse_key true}
;    :any {:modifier true :both true}
;    :command {:modifier true :both true}
;    :shift {:modifier true :both true}
;    :option {:modifier true :both true}
;    :control {:modifier true :both true}
;    :caps_lock {:modifier true}
;    :left_control {:modifier true}
;    :left_shift {:modifier true}
;    :left_option {:modifier true}
;    :left_command {:modifier true}
;    :right_control {:modifier true}
;    :right_shift {:modifier true}
;    :right_option {:modifier true}
;    :right_command {:modifier true}
;    :fn {:modifier true}
;    :return_or_enter {:label "enter" :display true}
;    :escape {:display true}
;    :delete_or_backspace {:label "backspace" :display true}
;    :delete_forward {:label "del" :display true}
;    :tab {:display true}
;    :spacebar {:display true}
;    :hyphen {:label "hyphen (-)" :display true}
;    :equal_sign {:label "equal_sign (=)" :display true}
;    :open_bracket {:label "open_bracket [" :display true}
;    :close_bracket {:label "close_bracket ]" :display true}
;    :backslash {:label "backslash (\\)" :display true}
;    :non_us_pound {}
;    :semicolon {:label "semicolon (;)" :display true}
;    :quote {:label "quote (')" :display true}
;    :grave_accent_and_tilde {:label "grave_accent_and_tilde ()" :display true}
;    :comma {:label "comma (,)" :display true}
;    :period {:label "period (.)" :display true}
;    :slash {:label "slash (/)" :display true}
;    :non_us_backslash {}
;    :up_arrow {:display true}
;    :down_arrow {:display true}
;    :left_arrow {:display true}
;    :right_arrow {:display true}
;    :page_up {:display true}
;    :page_down {:display true}
;    :home {:display true}
;    :end {:display true}
;    :a {:display true}
;    :b {:display true}
;    :c {:display true}
;    :d {:display true}
;    :e {:display true}
;    :f {:display true}
;    :g {:display true}
;    :h {:display true}
;    :i {:display true}
;    :j {:display true}
;    :k {:display true}
;    :l {:display true}
;    :m {:display true}
;    :n {:display true}
;    :o {:display true}
;    :p {:display true}
;    :q {:display true}
;    :r {:display true}
;    :s {:display true}
;    :t {:display true}
;    :u {:display true}
;    :v {:display true}
;    :w {:display true}
;    :x {:display true}
;    :y {:display true}
;    :z {:display true}
;    :1 {:display true}
;    :2 {:display true}
;    :3 {:display true}
;    :4 {:display true}
;    :5 {:display true}
;    :6 {:display true}
;    :7 {:display true}
;    :8 {:display true}
;    :9 {:display true}
;    :0 {:display true}
;    :f1 {:display true}
;    :f2 {:display true}
;    :f3 {:display true}
;    :f4 {:display true}
;    :f5 {:display true}
;    :f6 {:display true}
;    :f7 {:display true}
;    :f8 {:display true}
;    :f9 {:display true}
;    :f10 {:display true}
;    :f11 {:display true}
;    :f12 {:display true}
;    :f13 {}
;    :f14 {}
;    :f15 {}
;    :f16 {}
;    :f17 {}
;    :f18 {}
;    :f19 {}
;    :f20 {}
;    :f21 {:not-to true}
;    :f22 {:not-to true}
;    :f23 {:not-to true}
;    :f24 {:not-to true}
;    :display_brightness_decrement {:not-from true :consumer-key true}
;    :display_brightness_increment {:not-from true :consumer-key true}
;    :mission_control {:not-from true}
;    :launchpad {:not-from true}
;    :dashboard {:not-from true}
;    :illumination_decrement {:not-from true}
;    :illumination_increment {:not-from true}
;    :rewind {:not-from true :consumer-key true}
;    :play_or_pause {:not-from true :consumer-key true}
;    :fast_forward {:not-from true :consumer-key true}
;    :dictation {:not-from true :consumer-key true}
;    :mute {:consumer-key true}
;    :volume_decrement {:consumer-key true}
;    :volume_increment {:consumer-key true}
;    :eject {:consumer-key true}
;    :apple_display_brightness_decrement {:not-from true}
;    :apple_display_brightness_increment {:not-from true}
;    :apple_top_case_display_brightness_decrement {:not-from true}
;    :apple_top_case_display_brightness_increment {:not-from true}
;    :keypad_num_lock {:display true}
;    :keypad_slash {:display true}
;    :keypad_asterisk {:display true}
;    :keypad_hyphen {:display true}
;    :keypad_plus {:display true}
;    :keypad_enter {:display true}
;    :keypad_1 {:display true}
;    :keypad_2 {:display true}
;    :keypad_3 {:display true}
;    :keypad_4 {:display true}
;    :keypad_5 {:display true}
;    :keypad_6 {:display true}
;    :keypad_7 {:display true}
;    :keypad_8 {:display true}
;    :keypad_9 {:display true}
;    :keypad_0 {:display true}
;    :keypad_period {:display true}
;    :keypad_equal_sign {:display true}
;    :keypad_comma {:display true}
;    :vk_none {:label "vk_none (disable this key)" :not-from true}
;    :print_screen {:display true}
;    :scroll_lock {:display true}
;    :pause {:display true}
;    :insert {:display true}
;    :application {}
;    :help {}
;    :power {}
;    :execute {:not-to true}
;    :menu {:not-to true}
;    :select {:not-to true}
;    :stop {:not-to true}
;    :again {:not-to true}
;    :undo {:not-to true}
;    :cut {:not-to true}
;    :copy {:not-to true}
;    :paste {:not-to true}
;    :find {:not-to true}
;    :international1 {}
;    :international2 {}
;    :international3 {}
;    :international4 {}
;    :international5 {}
;    :international6 {}
;    :international7 {}
;    :international8 {}
;    :international9 {}
;    :lang1 {}
;    :lang2 {}
;    :lang3 {:not-to true}
;    :lang4 {:not-to true}
;    :lang5 {:not-to true}
;    :lang6 {:not-to true}
;    :lang7 {:not-to true}
;    :lang8 {:not-to true}
;    :lang9 {:not-to true}
;    :japanese_eisuu {:label "英数キー" :display true}
;    :japanese_kana {:label "かなキー" :display true}
;    :japanese_pc_nfer {:label "PCキーボードの無変換キー" :not-to true}
;    :japanese_pc_xfer {:label "PCキーボードの変換キー" :not-to true}
;    :japanese_pc_katakana {:label "PCキーボードのかなキー" :not-to true}
;    :keypad_equal_sign_as400 {:not-to true}
;    :locking_caps_lock {:not-to true}
;    :locking_num_lock {:not-to true}
;    :locking_scroll_lock {:not-to true}
;    :alternate_erase {:not-to true}
;    :sys_req_or_attention {:not-to true}
;    :cancel {:not-to true}
;    :clear {:not-to true}
;    :prior {:not-to true}
;    :return {:label "rarely used return (HID usage 0x9e)" :not-to true}
;    :separator {:not-to true}
;    :out {:not-to true}
;    :oper {:not-to true}
;    :clear_or_again {:not-to true}
;    :cr_sel_or_props {:not-to true}
;    :ex_sel {:not-to true}
;    :left_alt {:label "left_alt (equal toleft_option)"}
;    :left_gui {:label "left_gui (equal toleft_command)"}
;    :right_alt {:label "right_alt (equal toright_option)"}
;    :right_gui {:label "right_gui (equal toright_command)"}
;    :vk_consumer_brightness_down {:label "vk_consumer_brightness_down (equal todisplay_brightness_decrement)" :not-from true}
;    :vk_consumer_brightness_up {:label "vk_consumer_brightness_up (equal todisplay_brightness_increment)" :not-from true}
;    :vk_mission_control {:label "vk_mission_control (equal tomission_control)" :not-from true}
;    :vk_launchpad {:label "vk_launchpad (equal tolaunchpad)" :not-from true}
;    :vk_dashboard {:label "vk_dashboard (equal todashboard)" :not-from true}
;    :vk_consumer_illumination_down {:label "vk_consumer_illumination_down (equal toillumination_decrement)" :not-from true}
;    :vk_consumer_illumination_up {:label "vk_consumer_illumination_up (equal toillumination_increment)" :not-from true}
;    :vk_consumer_previous {:label "vk_consumer_previous (equal torewind)" :not-from true}
;    :vk_consumer_play {:label "vk_consumer_play (equal toplay)" :not-from true}
;    :vk_consumer_next {:label "vk_consumer_next (equal tofastforward)" :not-from true}
;    :al_voicemail {:not-to true :consumer-key true}
;    :al_desktop {:not-to true :consumer-key true}
;    :al_documents {:not-to true :consumer-key true}
;    :al_consumer_control_configuration {:consumer-key true}
;    :al_instant_messaging {:not-to true :consumer-key true}
;    :al_oem_feature_browser {:not-to true :consumer-key true}
;    :al_digital_wallet {:not-to true :consumer-key true}
;    :al_power_status {:not-to true :consumer-key true}
;    :al_newsreader {:not-to true :consumer-key true}
;    :al_presentation_app {:consumer-key true}
;    :al_research_or_search_browswer {:not-to true :consumer-key true}
;    :al_entertainment_content_browser {:not-to true :consumer-key true}
;    :al_movie_browser {:not-to true :consumer-key true}
;    :al_spreadsheet {:consumer-key true}
;    :al_navigation {:not-to true :consumer-key true}
;    :al_network_chat {:not-to true :consumer-key true}
;    :al_customized_corporate_news_browser {:not-to true :consumer-key true}
;    :al_oem_help {:not-to true :consumer-key true}
;    :al_preemptive_halt_task_or_application {:not-to true :consumer-key true}
;    :al_online_activity_browswer {:not-to true :consumer-key true}
;    :al_image_browser {:not-to true :consumer-key true}
;    :al_contextaware_desktop_assistant {:not-to true :consumer-key true}
;    :al_digital_rights_manager {:not-to true :consumer-key true}
;    :al_Calendar_Or_Schedule {:not-to true :consumer-key true}
;    :al_next_task_or_application {:not-to true :consumer-key true}
;    :al_task_or_project_manager {:not-to true :consumer-key true}
;    :al_contact_sync {:not-to true :consumer-key true}
;    :al_text_editor {:consumer-key true}
;    :al_process_or_task_manager {:not-to true :consumer-key true}
;    :al_previous_task_or_application {:not-to true :consumer-key true}
;    :al_calculator {:consumer-key true}
;    :al_virus_protection {:not-to true :consumer-key true}
;    :al_log_or_journal_or_timecard {:not-to true :consumer-key true}
;    :al_select_task_or_application {:not-to true :consumer-key true}
;    :al_internet_browser {:consumer-key true}
;    :al_clock {:not-to true :consumer-key true}
;    :al_checkbook_or_finance {:not-to true :consumer-key true}
;    :ac_forward {:not-to true :consumer-key true}
;    :al_alarms {:not-to true :consumer-key true}
;    :al_network_conference {:not-to true :consumer-key true}
;    :al_dictionary {:consumer-key true}
;    :al_audio_browser {:not-to true :consumer-key true}
;    :ac_bookmarks {:not-to true :consumer-key true}
;    :al_wireless_status {:not-to true :consumer-key true}
;    :al_lan_or_wan_browser {:not-to true :consumer-key true}
;    :al_database_app {:not-to true :consumer-key true}
;    :al_audio_player {:not-to true :consumer-key true}
;    :al_graphics_editor {:not-to true :consumer-key true}
;    :ac_home {:not-to true :consumer-key true}
;    :ac_back {:not-to true :consumer-key true}
;    :al_screen_saver {:not-to true :consumer-key true}
;    :ac_refresh {:not-to true :consumer-key true}
;    :al_control_panel {:not-to true :consumer-key true}
;    :al_logon_or_logoff {:not-to true :consumer-key true}
;    :al_market_monitor_or_finance_browser {:not-to true :consumer-key true}
;    :al_grammer_check {:not-to true :consumer-key true}
;    :al_smart_card_information_or_help {:not-to true :consumer-key true}
;    :al_spell_check {:not-to true :consumer-key true}
;    :al_telephony_or_dialer {:not-to true :consumer-key true}
;    :al_command_line_processor_or_run {:not-to true :consumer-key true}
;    :al_thesaurus {:not-to true :consumer-key true}
;    :al_online_community {:not-to true :consumer-key true}
;    :al_encryption {:not-to true :consumer-key true}
;    :al_logon {:not-to true :consumer-key true}
;    :al_online_shopping_browswer {:not-to true :consumer-key true}
;    :al_file_browser {:not-to true :consumer-key true}
;    :al_remote_networking_or_isp_connect {:not-to true :consumer-key true}
;    :al_contacts_or_address_book {:not-to true :consumer-key true}
;    :al_local_machine_browser {:consumer-key true}
;    :al_email_reader {:consumer-key true}
;    :al_logoff {:not-to true :consumer-key true}
;    :al_a_or_v_capture_or_playback {:not-to true :consumer-key true}
;    :al_keyboard_layout {:not-to true :consumer-key true}
;    :al_message_status {:not-to true :consumer-key true}
;    :al_integrated_help_center {:not-to true :consumer-key true}
;    :al_word_processor {:consumer-key true}
;    :volume_down {:label "volume_down (equal tovolume_decrement)"}
;    :volume_up {:label "volume_up (equal tovolume_increment`)"}})
