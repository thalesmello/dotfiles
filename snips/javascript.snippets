snippet desc "Describe block" b
describe('${1:description}', function () {
	${VISUAL}${0}
})
endsnippet

snippet it "It assertion block" b
it('${1:it does...}', function () {
	${VISUAL}${0}
})
endsnippet

snippet before "Before test block" b
before(Promise.coroutine(function * () {
	${VISUAL}${0}
}))
endsnippet

snippet af "Anonymous function" i
function ($1) {${2: return ${3:$1} }$0}
endsnippet

snippet fun "Function syntax" b
function ${1:function_name} (${2:arguments}) {
	${3:${VISUAL}}$0
}
endsnippet

snippet afun "Function syntax" b
async function ${1:function_name} (${2:arguments}) {
	${3:${VISUAL}}$0
}
endsnippet

snippet evalblock "Evaluation block" b
(function () {
	${VISUAL}$0
})();
endsnippet

snippet "(\w+).par" "Parenthesis (postfix)" r
(`!p snip.rv = match.group(1)`$1)$0
endsnippet

snippet "([^\s].*)\.(return|re)" "Return (postfix)" r
return `!p snip.rv = match.group(1)`$0
endsnippet

snippet "([^\s].*)\.log" "console.log (postfix)" r
console.log(`!p snip.rv = match.group(1)`)$0
endsnippet

snippet iferr "Basic error handling" b
if (err) throw err
endsnippet

snippet log "console.log(...)" i
console.log($0)
endsnippet

snippet logv "console.log(...)" i
console.log('${1:${VISUAL:variable}}', JSON.stringify($1, null, 2))$0
endsnippet

snippet json "JSON stringify" i
JSON.stringify(${1:${VISUAL}}, null, 2)$0
endsnippet

snippet "(const|var) (\w+)( =)?( )?" "Require module" br
`!p snip.rv = "{} {}".format(match.group(1), match.group(2))` = require('${1:`!p
snip.rv = {
	'Promise': 'bluebird',
	'R': 'ramda',
	'_': 'lodash',
}.get(match.group(2), match.group(2))
`}')$0
endsnippet

snippet get "Create a getter" b
get ${1:property} () {
	return $0
},
endsnippet

snippet co "Bluebird coroutine"
Promise.coroutine(function * (${1}) {
	${0:// Body...}
})
endsnippet

snippet each "Foreach"
for (const ${2:value} of ${1:iterable}) {
	$0
}
endsnippet

snippet "(\`[^\`]*)\$" "console.log (postfix)" r
`!p snip.rv = match.group(1)`${${1:${VISUAL:variable}}}$0
endsnippet

snippet try "Try catch" b
try {
	${VISUAL}$1
} catch (${2:err}) {
	$3
}$0
endsnippet

snippet / "Include types using comments" i
/* :${VISUAL}$1*/$0
endsnippet

snippet flow "Include flow comment" b
// @flow$0
endsnippet

snippet type "Type wrap" b
/* ::
${VISUAL}$0
*/
endsnippet

snippet q "Expand query" b
await redshift.query(\`
	${VISUAL}$0
\`)
endsnippet

snippet m "Adds a method" b
${1:name} (${2:params}) {
	${VISUAL}$0
}
endsnippet

snippet am "Adds a method" b
async ${1:name} (${2:params}) {
	${VISUAL}$0
}
endsnippet

snippet af "Async lambda" i
async (${1:params}) => $0
endsnippet

snippet gen "Function generator" i
function *$1 (${2:args}) {
	${VISUAL}$0
}
endsnippet
