snippet desc "Describe block" b
describe('${1:description}', function (${2}) {
	${VISUAL}${0}
})
endsnippet

snippet it "It assertion block" b
it('${1:it does...}', function (${2}) {
	${VISUAL}${0}
})
endsnippet

snippet before "Before test block" b
before('${1:before...}', function (${2}) {
	${VISUAL}${0}
})
endsnippet

snippet af "Anonymous function" i
function ($1) {${2: return ${3:$1} }$0}
endsnippet

snippet fun "Function syntax" b
function ${1:function_name} (${2:arguments}) {
	${3:${VISUAL}}$0
}
endsnippet

snippet evalblock "Evaluation block" b
(function () {
	${VISUAL}$0
})();
endsnippet

snippet "(\w+).par" "Parenthesis (postfix)" r
(`!p snip.rv = match.group(1)`$1)$0
endsnippet

snippet "([^\s].*)\.(return|re)" "Return (postfix)" r
return `!p snip.rv = match.group(1)`$0
endsnippet

snippet "([^\s].*)\.log" "console.log (postfix)" r
console.log(`!p snip.rv = match.group(1)`)$0
endsnippet

snippet iferr "Basic error handling" b
if (err) throw err
endsnippet

snippet log "console.log(...)" i
console.log($0)
endsnippet

snippet logv "console.log(...)" i
console.log('${1:${VISUAL:variable}}', JSON.stringify($1, null, 2))$0
endsnippet

snippet json "JSON stringify" i
JSON.stringify(${1:${VISUAL}}, null, 2)$0
endsnippet

snippet "var (\w+)( =)?( )?" "Require module" br
var `!p snip.rv = match.group(1)` = require('${1:`!p
snip.rv = {
	'Promise': 'bluebird',
	'R': 'ramda'
}.get(match.group(1), match.group(1))
`}')$0
endsnippet

snippet get "Create a getter" b
get ${1:property} () {
	return $0
},
endsnippet

