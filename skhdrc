# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

ctrl + alt + cmd + shift - m : yabai -m window --deminimize "$(yabai -m query --windows | jq 'map(select(."is-minimized")) | first | .id')"
ctrl + alt + cmd - m : yabai -m window --minimize
ctrl + alt + cmd - return : yabai -m window --toggle windowed-fullscreen


# # Open square bracket [
ctrl + alt + cmd - 0x21 : yabai-preset focus-space prev
# # Clsoe square bracket ]
ctrl + alt + cmd - 0x1E : yabai-preset focus-space next

ctrl + alt + cmd - h : yabai -m window --focus west || yabai-preset focus-window west
ctrl + alt + cmd - j : yabai -m window --focus south || yabai-preset focus-window south
ctrl + alt + cmd - k : yabai -m window --focus north || yabai-preset focus-window north
ctrl + alt + cmd - l : yabai -m window --focus east || yabai-preset focus-window east

ctrl + alt + cmd + shift - h : yabai -m window --swap west || skhd -k "ctrl + alt + cmd - left"
ctrl + alt + cmd + shift - j : yabai -m window --swap south || skhd -k "ctrl + alt + cmd - down"
ctrl + alt + cmd + shift - k : yabai -m window --swap north || skhd -k "ctrl + alt + cmd - up"
ctrl + alt + cmd + shift - l : yabai -m window --swap east || skhd -k "ctrl + alt + cmd - right"

# minus
ctrl + alt + cmd - 0x1B : yabai -m window --resize bottom_right:-100:0
ctrl + alt + cmd + shift - 0x1B : yabai -m window --resize bottom_right:0:-100
# equals
ctrl + alt + cmd - 0x18 : yabai -m window --resize bottom_right:100:0
ctrl + alt + cmd + shift - 0x18 : yabai -m window --resize bottom_right:0:100

ctrl + alt + cmd - 1 : yabai-preset focus-space 1
ctrl + alt + cmd - 2 : yabai-preset focus-space 2
ctrl + alt + cmd - 3 : yabai-preset focus-space 3
ctrl + alt + cmd - 4 : yabai-preset focus-space 4
ctrl + alt + cmd - 5 : yabai-preset focus-space 5
ctrl + alt + cmd - 6 : yabai-preset focus-space 6
ctrl + alt + cmd - 7 : yabai-preset focus-space 7
ctrl + alt + cmd - 8 : yabai-preset focus-space 8
ctrl + alt + cmd - 9 : yabai-preset focus-space 9

ctrl + alt + cmd + shift - 1 : yabai-preset move-window-to-space 1
ctrl + alt + cmd + shift - 2 : yabai-preset move-window-to-space 2
ctrl + alt + cmd + shift - 3 : yabai-preset move-window-to-space 3
ctrl + alt + cmd + shift - 4 : yabai-preset move-window-to-space 4
ctrl + alt + cmd + shift - 5 : yabai-preset move-window-to-space 5
ctrl + alt + cmd + shift - 6 : yabai-preset move-window-to-space 6
ctrl + alt + cmd + shift - 7 : yabai-preset move-window-to-space 7
ctrl + alt + cmd + shift - 8 : yabai-preset move-window-to-space 8
ctrl + alt + cmd + shift - 9 : yabai-preset move-window-to-space 9

# Move right a space
ctrl + alt + cmd - n : yabai -m query --spaces --space | jq -e '.type == "float"' && yabai-preset focus-window-in-space next || yabai-preset focus-window-in-stack next
# Move left a space
ctrl + alt + cmd - p : yabai -m query --spaces --space | jq -e '.type == "float"' && yabai-preset focus-window-in-space prev || yabai-preset focus-window-in-stack prev
# move window right a space
ctrl + alt + cmd + shift - n : yabai-preset move-window-in-stack next
# move window left a space
ctrl + alt + cmd + shift - p : yabai-preset move-window-in-stack prev


::stack @ : display-message "Stack"
stack < escape ; default
stack < j : skhd -k escape; yabai -m window --stack south
stack < k : skhd -k escape; yabai -m window --stack north
stack < h : skhd -k escape; yabai -m window --stack west
stack < l : skhd -k escape; yabai -m window --stack east

::resize @ : display-message "Resize"
resize < escape ; default
resize < return ; default
resize < j : yabai -m window --resize bottom_right:0:100
resize < k : yabai -m window --resize bottom_right:0:-100
resize < h : yabai -m window --resize bottom_right:-100:0
resize < l : yabai -m window --resize bottom_right:100:0
resize < shift - j : yabai -m window --resize top_left:0:100
resize < shift - k : yabai -m window --resize top_left:0:-100
resize < shift - h : yabai -m window --resize top_left:-100:0
resize < shift - l : yabai -m window --resize top_left:100:0

::service @

ctrl + alt + cmd - space ; service


# Service mode bindings
service < escape ; default
service < ctrl + alt + cmd - space : skhd -k "escape"; yabai-preset focus-space recent
service < space : skhd -k "escape"; yabai-preset focus-space recent
service < shift - space : skhd -k "escape"; yabai-preset move-window-to-space recent
# semicolon
service < shift - 0x29 : skhd -k "escape"; yabai-preset arrange-windows-side-by-side
service < r ; resize
service < R : skhd -k "escape"; yabai --stop-service && yabai --start-service
service < v : skhd -k "escape"; yabai -m window --insert east
# double quotes
service < shift - 0x27 : skhd -k "escape"; yabai -m window --insert south
service < t : skhd -k "escape"; yabai -m window --toggle float

# comma
service < z :  skhd -k "escape"; yabai -m window --insert stack
service < s ; stack
service < shift - s : skhd -k "escape"; yabai-preset stack-windows-in-space
# Comma
service < 0x2B : skhd -k "escape"; yabai -m space --layout stack; display-message "Laybout stack"
# Period
service < 0x2F : skhd -k "escape"; yabai -m space --layout bsp; display-message "Laybout bsp"
service < 0 : skhd -k "escape"; yabai -m space --layout float; display-message "Laybout float"

# Pipe |
service < shift - 0x2A : skhd -k "escape"; yabai -m space --mirror y-axis
# minus
service < 0x1B : skhd -k "escape"; yabai -m space --mirror x-axis
# Comma
service < shift - 0x2B : skhd -k "escape"; yabai -m space --rotate 90
# Period
service < shift - 0x2F : skhd -k "escape"; yabai -m space --rotate 270
service < y : skhd -k "escape"; yabai -m window --toggle split
# equals
service < 0x18 : skhd -k "escape"; yabai -m space --balance
# move window to space with number
service < 1 : skhd -k "escape"; yabai-preset focus-window-in-stack 1
service < 2 : skhd -k "escape"; yabai-preset focus-window-in-stack 2
service < 3 : skhd -k "escape"; yabai-preset focus-window-in-stack 3
service < 4 : skhd -k "escape"; yabai-preset focus-window-in-stack 4
service < 5 : skhd -k "escape"; yabai-preset focus-window-in-stack 5
service < 6 : skhd -k "escape"; yabai-preset focus-window-in-stack 6
service < 7 : skhd -k "escape"; yabai-preset focus-window-in-stack 7
service < 8 : skhd -k "escape"; yabai-preset focus-window-in-stack 8
service < 9 : skhd -k "escape"; yabai-preset focus-window-in-stack 9
service < shift - 1 : skhd -k "escape"; yabai-preset move-window-in-stack 1
service < shift - 2 : skhd -k "escape"; yabai-preset move-window-in-stack 2
service < shift - 3 : skhd -k "escape"; yabai-preset move-window-in-stack 3
service < shift - 4 : skhd -k "escape"; yabai-preset move-window-in-stack 4
service < shift - 5 : skhd -k "escape"; yabai-preset move-window-in-stack 5
service < shift - 6 : skhd -k "escape"; yabai-preset move-window-in-stack 6
service < shift - 7 : skhd -k "escape"; yabai-preset move-window-in-stack 7
service < shift - 8 : skhd -k "escape"; yabai-preset move-window-in-stack 8
service < shift - 9 : skhd -k "escape"; yabai-preset move-window-in-stack 9
service < ctrl + alt + cmd - h : skhd -k "escape"; yabai -m window --warp west || yabai-preset unstack-window west
service < ctrl + alt + cmd - j : skhd -k "escape"; yabai -m window --warp south || yabai-preset unstack-window south
service < ctrl + alt + cmd - k : skhd -k "escape"; yabai -m window --warp north || yabai-preset unstack-window north
service < ctrl + alt + cmd - l : skhd -k "escape"; yabai -m window --warp east || yabai-preset unstack-window east
service < h : skhd -k "escape"; yabai-preset focus-display-with-fallback west
service < j : skhd -k "escape"; yabai-preset focus-display-with-fallback west
service < k : skhd -k "escape"; yabai-preset focus-display-with-fallback west
service < l : skhd -k "escape"; yabai-preset focus-display-with-fallback west
service < tab : skhd -k "escape"; yabai-preset move-window-to-display-with-fallback next



# Below is a list of keybinidng that would be equivalent to "Invoke" move on Aerospace
# But currently there's no support for presetting windows in a specific space without disabling SIP
# I'm keeping this commented in case it's useful in the future
# # Invoke mode bindings
# ::invoke @
# ctrl + alt + cmd - i ; invoke
# invoke < escape ; default
# invoke < 1 : skhd -k "escape"; yabai -m window --space 1
# invoke < p : skhd -k "escape"; yabai -m window --space 7
# invoke < w : skhd -k "escape"; yabai -m window --space 4
# invoke < shift - w : skhd -k "escape"; yabai -m window --space 4
# invoke < z : skhd -k "escape"; yabai -m window --space 5
# invoke < shift - z : skhd -k "escape"; yabai -m window --space 5
# invoke < f : skhd -k "escape"; yabai -m window --space next
# invoke < shift - f : skhd -k "escape"; yabai -m window --space next
# invoke < m : skhd -k "escape"; yabai -m window --space next
