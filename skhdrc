# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# focus window
# alt - h : yabai -m window --focus west

# swap managed window
# shift + alt - h : yabai -m window --swap north

# move managed window
# shift + cmd - h : yabai -m window --warp east

# balance size of windows
# shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# fast focus desktop
# cmd + alt - x : yabai -m space --focus recent
# cmd + alt - 1 : yabai -m space --focus 1

# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
# alt - t : yabai -m window --toggle float --grid 4:4:1:1:2:2

# toggle sticky(+float), picture-in-picture
# alt - p : yabai -m window --toggle sticky --toggle pip

# Gemini completion

# skhd equivalent for aerospace.toml

# After login and startup commands are not directly translatable to skhd.
# skhd focuses on keybindings. You would typically handle these
# using other tools or scripts that run on login/startup.

# start-at-login = false
# This is a macOS setting, not skhd configuration.

# Normalizations: These are AeroSpace specific and don't have direct skhd equivalents.
# enable-normalization-flatten-containers = true
# enable-normalization-opposite-orientation-for-nested-containers = true

# Layout settings are AeroSpace specific.
# accordion-padding = 120
# default-root-container-layout = 'tiles'
# default-root-container-orientation = 'auto'

# Key mapping preset: This is AeroSpace specific.
# key-mapping.preset = 'qwerty'

# Mouse follows focus on monitor change: This can be achieved with a separate script
# triggered by AeroSpace's on-focused-monitor-changed event, not directly in skhd.
# on-focused-monitor-changed = ['move-mouse monitor-lazy-center']

# Exec on workspace change: This would be handled by AeroSpace's event system,
# not directly by skhd.
# exec-on-workspace-change = ['/opt/homebrew/bin/fish', '-c', 'aerospace-on-workspace-change']

# Gaps: These are window manager specific settings. skhd doesn't handle window management.
# [gaps]
# inner.horizontal = 10
# inner.vertical =    10
# outer.left =        10
# outer.bottom =      10
# outer.top =         10
# outer.right =       10


::service @

# 'main' binding mode
ctrl + alt + cmd + shift - m : /opt/homebrew/bin/fish -c 'aerospace-preset move-window'
ctrl + alt + cmd - m : /opt/homebrew/bin/fish -c 'aerospace move-node-to-workspace ?'

# Comma
ctrl + alt + cmd - 0x2B : yabai -m space --layout stack
# Period
ctrl + alt + cmd - 0x2F : yabai -m space --layout bsp

ctrl + alt + cmd - 0 : yabai -m space --layout float

# Open square bracket [
ctrl + alt + cmd - 0x21 : yabai -m window --focus stack.prev
# Clsoe square bracket [
ctrl + alt + cmd - 0x1E : yabai -m window --focus stack.next

ctrl + alt + cmd - h : yabai -m window --focus west || yabai-preset focus-window west
ctrl + alt + cmd - j : yabai -m window --focus south || yabai-preset focus-window south
ctrl + alt + cmd - k : yabai -m window --focus north || yabai-preset focus-window north
ctrl + alt + cmd - l : yabai -m window --focus east || yabai-preset focus-window east

ctrl + alt + cmd + shift - h : yabai -m window --swap west
ctrl + alt + cmd + shift - j : yabai -m window --swap south
ctrl + alt + cmd + shift - k : yabai -m window --swap north
ctrl + alt + cmd + shift - l : yabai -m window --swap east

# minus
ctrl + alt + cmd - 0x1B : yabai -m window --resize left:-100:0
# equals
ctrl + alt + cmd - 0x18 : yabai -m window --resize right:100:0

ctrl + alt + cmd - 1 : yabai-preset focus-space 1
ctrl + alt + cmd - 2 : yabai-preset focus-space 2
ctrl + alt + cmd - 3 : yabai-preset focus-space 3
ctrl + alt + cmd - 4 : yabai-preset focus-space 4
ctrl + alt + cmd - 5 : yabai-preset focus-space 5
ctrl + alt + cmd - 6 : yabai-preset focus-space 6
ctrl + alt + cmd - 7 : yabai-preset focus-space 7
ctrl + alt + cmd - 8 : yabai-preset focus-space 8
ctrl + alt + cmd - 9 : yabai-preset focus-space 9

ctrl + alt + cmd + shift - 1 : yabai-preset move-window-to-space 1
ctrl + alt + cmd + shift - 2 : yabai-preset move-window-to-space 2
ctrl + alt + cmd + shift - 3 : yabai-preset move-window-to-space 3
ctrl + alt + cmd + shift - 4 : yabai-preset move-window-to-space 4
ctrl + alt + cmd + shift - 5 : yabai-preset move-window-to-space 5
ctrl + alt + cmd + shift - 6 : yabai-preset move-window-to-space 6
ctrl + alt + cmd + shift - 7 : yabai-preset move-window-to-space 7
ctrl + alt + cmd + shift - 8 : yabai-preset move-window-to-space 8
ctrl + alt + cmd + shift - 9 : yabai-preset move-window-to-space 9

# Move right a space
ctrl + alt + cmd - n : yabai-preset focus-space next
# Move left a space
ctrl + alt + cmd - p : yabai-preset focus-space prev
# move window right a space
ctrl + alt + cmd + shift - n : yabai-preset move-window-to-space next
# move window left a space
ctrl + alt + cmd + shift - p : yabai-preset move-window-to-space prev

ctrl + alt + cmd - space ; service


# Service mode bindings
service < escape ; default
# service < return : yabai -m space --focus recent ; skhd -k "escape"
service < ctrl + alt + cmd - space : skhd -k "escape"; yabai-preset focus-space recent
service < space : skhd -k "escape"; yabai-preset focus-space recent
service < shift - space : skhd -k "escape"; yabai-preset move-window-to-space recent
# comma
# service < shift - 0x2B : yabai-preset move-window-to--space recent ; skhd -k "escape"
# semicolon
# service < shift - 0x29 : yabai -m window --space next; yabai -m space --focus next ; skhd -k "escape"
# service < f : yabai -m window --space next; yabai -m space --focus next ; skhd -k "escape"
# service < r : yabai -m space --balance ; skhd -k "escape"
# service < t : yabai -m window --toggle float ; skhd -k "escape"
# service < backspace : yabai -m window --space next; yabai -m space --focus next ; skhd -k "escape"
# service < tab : yabai -m display --focus next ; skhd -k "escape"
# grave
# service < 0x32 : yabai -m window --display next; yabai -m display --focus next ; skhd -k "escape"
# service < ctrl + alt + cmd - n : yabai -m window --display next; yabai -m display --focus next ; skhd -k "escape"
# service < ctrl + alt + cmd - p : yabai -m window --display prev; yabai -m display --focus prev ; skhd -k "escape"
# equals
service < 0x18 : skhd -k "escape"; yabai -m space --balance
# move window to space with number
service < 1 : skhd -k "escape"; yabai-preset move-window-to-space 1
service < 2 : skhd -k "escape"; yabai-preset move-window-to-space 2
service < 3 : skhd -k "escape"; yabai-preset move-window-to-space 3
service < 4 : skhd -k "escape"; yabai-preset move-window-to-space 4
service < 5 : skhd -k "escape"; yabai-preset move-window-to-space 5
service < 6 : skhd -k "escape"; yabai-preset move-window-to-space 6
service < 7 : skhd -k "escape"; yabai-preset move-window-to-space 7
service < 8 : skhd -k "escape"; yabai-preset move-window-to-space 8
service < 9 : skhd -k "escape"; yabai-preset move-window-to-space 9
service < ctrl + alt + cmd - h : skhd -k "escape"; yabai -m window --warp west
service < ctrl + alt + cmd - j : skhd -k "escape"; yabai -m window --warp south
service < ctrl + alt + cmd - k : skhd -k "escape"; yabai -m window --warp north
service < ctrl + alt + cmd - l : skhd -k "escape"; yabai -m window --warp east
service < h : skhd -k "escape"; yabai-preset focus-display-with-fallback west
service < j : skhd -k "escape"; yabai-preset focus-display-with-fallback west
service < k : skhd -k "escape"; yabai-preset focus-display-with-fallback west
service < l : skhd -k "escape"; yabai-preset focus-display-with-fallback west
service < shift - h : skhd -k "escape"; yabai-preset move-window-to-display-with-fallback west
service < shift - j : skhd -k "escape"; yabai-preset move-window-to-display-with-fallback south
service < shift - k : skhd -k "escape"; yabai-preset move-window-to-display-with-fallback north
service < shift - l : skhd -k "escape"; yabai-preset move-window-to-display-with-fallback east



# Below is a list of keybinidng that would be equivalent to "Invoke" move on Aerospace
# But currently there's no support for presetting windows in a specific space without disabling SIP
# I'm keeping this commented in case it's useful in the future
# # Invoke mode bindings
# ::invoke @
# ctrl + alt + cmd - i ; invoke
# invoke < escape ; default
# invoke < 1 : skhd -k "escape"; yabai -m window --space 1
# invoke < p : skhd -k "escape"; yabai -m window --space 7
# invoke < w : skhd -k "escape"; yabai -m window --space 4
# invoke < shift - w : skhd -k "escape"; yabai -m window --space 4
# invoke < z : skhd -k "escape"; yabai -m window --space 5
# invoke < shift - z : skhd -k "escape"; yabai -m window --space 5
# invoke < f : skhd -k "escape"; yabai -m window --space next
# invoke < shift - f : skhd -k "escape"; yabai -m window --space next
# invoke < m : skhd -k "escape"; yabai -m window --space next
